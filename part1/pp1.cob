000100 IDENTIFICATION DIVISION.
000200 PROGRAM-ID.   INSPROD.
000300
000400 ENVIRONMENT DIVISION.
000500 CONFIGURATION SECTION.
000800
000900 INPUT-OUTPUT SECTION.
001000 FILE-CONTROL.
001100
001200******* FICHIER DVSK : FICHIER DEVISES INDEXé
001300      SELECT DVSK ASSIGN TO DVSKSDS
001400      ORGANIZATION IS INDEXED
001500      ACCESS MODE IS DYNAMIC
001600      RECORD KEY IS CODE-DVSK
001700      FILE STATUS IS FS-DVSK.
001800
001900******** FICHIER NOUVEAUX PRODUITS à INSéRER DANS LA BASE
002000      SELECT NP ASSIGN TO NEWPRODS
002100      ORGANIZATION IS SEQUENTIAL.
002200
002300 DATA DIVISION.
002400 FILE SECTION.
002500
002600 FD DVSK
002700     BLOCK CONTAINS 0 RECORDS.
002800 01 ENR-DVSK.
002900    05 CODE-DVSK     PIC X(4).
003000    05 TAUX-DVSK     PIC 9(1)V9(8).
003100    05 FILLER        PIC X(7).
003200
003300 FD NP
003400     BLOCK CONTAINS 0 RECORDS.
003500 01 ENR-NP.
003600    05 NP-LCSV       PIC X(45).
003700
003800 WORKING-STORAGE SECTION.
003900***** WS-ANO POUR LA DIVISION PAR ZERO POUR SORTIE DE PGM
004000 77 WS-ANO           PIC 99          VALUE ZERO.
004100***** FS-DVSK FILE STATUS DU FICHIER DVS KSDS
004200 77 FS-DVSK          PIC 99          VALUE ZERO.
004500
004600***** WS-NPFLAG STATUT DE LA LECTURE DU FICHIER NOUVEAU PRODUITS
004700 77 WS-NPFLAG        PIC 9           VALUE ZERO.
004800
004900***** VARS POUR L'ECLATEMENT DE LA LIGNE CSV NOUVEAU PRODUIT
005000 77 WS-N-PO          PIC X(3)        VALUE ALL SPACES.
005100 77 WS-DESC          PIC X(30)       VALUE ALL SPACES.
005200 77 WS-PRIX-NUM      PIC 9(5)V9(2)  VALUE ZERO.
005201 77 ED-PRIX-NUM      PIC ZZ9.99     VALUE ZERO.
005202 77 WS-PRIX-TEXT     PIC X(10)      VALUE ALL SPACES.
005210 77 WS-PRIX-DO       PIC 9(5)V9(2)  VALUE ZERO.
005300 77 WS-DVS           PIC X(3)        VALUE ALL SPACES.
005400
005500* VARS POUR  500-FORMAT-DESC
005600 77 WS-DESC-IND      PIC 99          VALUE ZERO.
005700 77 WS-DESC-INDNEXT  PIC 99          VALUE ZERO.
005800
005900****** PARTIE SQL POUR L'INSERTION DES PRODUITS DANS LA BDD
006000     EXEC SQL
006100        INCLUDE SQLCA
006200     END-EXEC.
006300
006400     EXEC SQL
006500        INCLUDE PRODUCTS
006600     END-EXEC.
006700
006800 77  ED-SQLCODE PIC +Z(8)9.
006900
007000
007100 PROCEDURE DIVISION.
007200
007300     PERFORM 100-OPEN-NP
007400     PERFORM UNTIL WS-NPFLAG = 1
007500        PERFORM 300-AFF-NP
007600        PERFORM 500-TRAIT-NP
007700        PERFORM 100-READ-NP
007710     END-PERFORM
007800     PERFORM 900-CLOSE-NP
007900
008000     PERFORM 900-COMMIT
008100
008200
008300
008400     STOP RUN.
008500
008600 100-OPEN-NP.
008700     OPEN INPUT NP
008800     READ NP
008900     AT END
009000        DISPLAY 'FICHIER NP VIDE'
009100        MOVE 1 TO WS-NPFLAG
009200     END-READ.
009300
009400 100-READ-NP.
009401     DISPLAY '****** READ NP ******* '
009410     INITIALIZE NP-LCSV
009500     READ NP
009600     AT END
009700        DISPLAY 'FIN DU FICHIER NP'
009800        MOVE 1 TO WS-NPFLAG
009801     DISPLAY 'NP-LCSV : ' NP-LCSV
009810     DISPLAY '**********************'
009900     END-READ.
010000
010100
010200* OUVERTURE DU FICHIER INDEXé DE DEVISES
010300 100-OPEN-DVSK.
010400     OPEN INPUT DVSK
010500     IF FS-DVSK NOT EQUAL ZERO THEN
010600        DISPLAY 'ERR OPEN DVS  FS-DVSK : ' FS-DVSK
010700        PERFORM 200-ABEND-PROG
010800     END-IF.
010900
011000 200-ABEND-PROG.
011100     DISPLAY ' 200-ABEND-PROG !'
011200     PERFORM 900-ROLLBACK
011300     COMPUTE WS-ANO = 1 / WS-ANO.
011400
011500
011600
011700 300-AFF-DVSK.
011710     DISPLAY 'CODE DVSK : ' CODE-DVSK
011720     DISPLAY 'TAUX-DVSK : ' TAUX-DVSK
012100     EXIT.
012200
012300
012400 300-AFF-NP.
012500     DISPLAY 'LIGNE NP : ' NP-LCSV.
012600
012700* TROUVE CODE-DVSK DANS LE FICHIER DVSK POUR AFFECTER ENR-DVSK
012800 400-FIND-DEVISE.
012810     DISPLAY '******** FIND DEVISE **************'
012820     DISPLAY 'CODE DVSK : ' CODE-DVSK
012900     PERFORM 100-OPEN-DVSK
013000     READ DVSK
013100     EVALUATE FS-DVSK
013200     WHEN 23
013300          DISPLAY CODE-DVSK ' EST INEXISTANT !!!!'
013400     WHEN ZERO
013410          DISPLAY CODE-DVSK ' TROUVé'
013500          PERFORM 300-AFF-DVSK
013600     WHEN OTHER
013700          DISPLAY 'AUTRE ERREUR : FS-DVSK : ' FS-DVSK
013800          PERFORM 200-ABEND-PROG
013900     END-EVALUATE
014000     PERFORM 900-CLOSE-DVSK
014010     DISPLAY '******************************'
014020     DISPLAY '  '.
014100
014200
014300
014400******************************************************
014500*  500-TRAIT NP
014600*
014700*     TRAITEMENT D'UNE LIGNE DU FICHIER NOUVEAUPRODUIT
014800*        * ECLATEMENT DE LA CHAINE CSV
014900*        * FORMATTAGE DE LA DESCPITION (MAJUSCULE)
015000*        * CONVERSION DU PRIX DEVISE VERS DOLLARS
015100*        * AJOUT DE LA LIGNE à LA TABLE PRODUIT
015200*
015300******************************************************
015400 500-TRAIT-NP.
015500     PERFORM 500-SPLIT-LCSV
015600     PERFORM 500-FORMAT-DESC
015700     MOVE WS-DVS TO CODE-DVSK
015800     PERFORM 400-FIND-DEVISE
015900     PERFORM 500-CALC-PRIX-DO
016000     PERFORM 500-BD-INSERT-NP
016100
016200
016300     EXIT.
016400
016500******* SEPARATION DE LA LIGNE CSV EN VARIABLES
016600 500-SPLIT-LCSV.
016700     DISPLAY '******* SPLIT LCSV *****'
016800     DISPLAY 'NP-LCSV : ' NP-LCSV
016900     UNSTRING NP-LCSV DELIMITED BY ';' INTO WS-N-PO
017000                                            WS-DESC
017100                                            WS-PRIX-TEXT
017200                                            WS-DVS
017300     DISPLAY 'WS-N-PO : ' WS-N-PO
017400     DISPLAY 'WS-DESC : ' WS-DESC
017410     DISPLAY 'WS-PRIX-TEXT : ' WS-PRIX-TEXT
017420     COMPUTE WS-PRIX-NUM = FUNCTION NUMVAL-C(WS-PRIX-TEXT)
017500     DISPLAY 'WS-PRIX-NUM :  ' WS-PRIX-NUM
017510     MOVE WS-PRIX-NUM TO ED-PRIX-NUM
017520     DISPLAY 'ED-PRIX-NUM : ' ED-PRIX-NUM
017600     DISPLAY 'WS-DVS : ' WS-DVS
017700     DISPLAY '************************'
017800     DISPLAY ' '
017900     EXIT.
018000
018100
018200 500-FORMAT-DESC.
018210     DISPLAY '****** FORMAT DESC ******'
018300     DISPLAY WS-DESC
018400     MOVE FUNCTION LOWER-CASE(WS-DESC) TO WS-DESC
018500     DISPLAY WS-DESC
018600
018700     MOVE 1 TO WS-DESC-IND
018800
018900
019000     MOVE FUNCTION UPPER-CASE(WS-DESC(1:1)) TO WS-DESC(1:1)
019100
019200     PERFORM VARYING WS-DESC-IND FROM 1 BY 1 UNTIL
019300        WS-DESC-IND > 29
019400
019500             ADD 1 TO WS-DESC-IND GIVING WS-DESC-INDNEXT
019600
019700             IF WS-DESC(WS-DESC-IND:1) = SPACE
019800
019900                MOVE FUNCTION UPPER-CASE(WS-DESC(WS-DESC-INDNEXT:1
020000                   )) TO
020100                   WS-DESC(WS-DESC-INDNEXT:1)
020200             END-IF
020300
020400
020500     END-PERFORM.
020600
020700     DISPLAY WS-DESC
020800
020810     DISPLAY '*********************'
020820     DISPLAY ' '
020900     EXIT.
021000
021100 500-CALC-PRIX-DO.
021110     DISPLAY '******* CALC PRIX DO ********'
021120     DISPLAY 'WS-PRIX-NUM : '  WS-PRIX-NUM
021130     DISPLAY 'TAUX-DVSK : ' TAUX-DVSK
021140     MOVE ZERO TO WS-PRIX-DO
021200*    MULTIPLY TAUX-DVSK BY WS-PRIX-NUM GIVING WS-PRIX-DO
021201*        ON SIZE ERROR DISPLAY 'SIZE ERROR'
021202*    END-MULTIPLY
021203     COMPUTE WS-PRIX-DO = WS-PRIX-NUM * TAUX-DVSK
021204     DISPLAY 'WS-PRIX-DO : ' WS-PRIX-DO
021210     DISPLAY '***************************'
021300     EXIT.
021400
021500 500-BD-INSERT-NP.
021501     DISPLAY '********* BD INSERT NP ********'
021502     INITIALIZE ST-PROD
021510     MOVE WS-PRIX-DO TO PROD-PRICE
021520     DISPLAY 'INSERTING : '
021530     DISPLAY 'WS-N-PO : ' WS-N-PO
021540     DISPLAY 'WS-DESC : ' WS-DESC
021550     DISPLAY 'PROD-PRICE : ' PROD-PRICE
021560     MOVE WS-N-PO TO PROD-P-NO
021570     MOVE WS-DESC TO PROD-DESCRIPTION-TEXT
021580     INSPECT WS-DESC TALLYING PROD-DESCRIPTION-LEN FOR CHARACTERS
021590          BEFORE INITIAL '  '
021600     EXEC SQL
021700         INSERT INTO API5.PRODUCTS
021800         VALUES (:PROD-P-NO, :PROD-DESCRIPTION, :PROD-PRICE)
021900     END-EXEC
022000     MOVE SQLCODE TO ED-SQLCODE
022100     EVALUATE TRUE
022200           WHEN SQLCODE = ZERO
022300             CONTINUE
022400           WHEN SQLCODE > ZERO
022500               IF SQLCODE = +100
022600                     CONTINUE
022700               ELSE
022800                     DISPLAY 'WARNING : ' ED-SQLCODE
022900               END-IF
022910           WHEN SQLCODE = -803
022920               DISPLAY 'INSERT ERROR EXISTING KEY : ' PROD-P-NO
023000           WHEN OTHER
023100               DISPLAY 'SQLCODE : ' ED-SQLCODE
023200               PERFORM 200-ABEND-PROG
023300       END-EVALUATE
023301     DISPLAY '*******************'
023310     DISPLAY ' '
023400     EXIT.
023500
023600 900-CLOSE-DVSK.
023700     CLOSE DVSK
023800     IF FS-DVSK NOT EQUAL ZERO THEN
023900        DISPLAY 'ERR CLOSE DVS   FS-DVSK : ' FS-DVSK
024000        PERFORM 200-ABEND-PROG
024100     END-IF.
024200
024300 900-CLOSE-NP.
024310     DISPLAY '** CLOSING NP **'
024400     CLOSE NP.
024500
024600 900-COMMIT.
024700     EXEC SQL
024800        COMMIT
024900     END-EXEC.
025000
025100 900-ROLLBACK.
025200     EXEC SQL
025300        ROLLBACK
025400     END-EXEC.
025500
025600
